input sampleXY {
  x: [String]!
  y: [String]!
}

input sampleY {
  y: [String]!
}

type Mutation {
  putSample(key: String!, input: sampleXY!): sample
  checkInSample(id: String!, input: sampleY!): sample
}

type Query {
  checkOutSample(poolID: String!): sample
}

type Subscription {
  onSampleCompleted(poolID: String): sample
    @aws_subscribe(mutations: ["checkInSample"])
}

type User
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: owner, ownerField: "id", operations: [read] }]) {
  id: ID!
  name: String
    @auth(
      rules: [{ allow: owner, ownerField: "id", operations: [update, read] }]
    )
  email: String
    @auth(
      rules: [{ allow: owner, ownerField: "id", operations: [update, read] }]
    )
  trust: Float
    @auth(rules: [{ allow: owner, ownerField: "id", operations: [read] }])
  balance: Float
    @auth(rules: [{ allow: owner, ownerField: "id", operations: [read] }])
  pools: [PoolUser] @connection(keyName: "byUser", fields: ["id"])
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
}

type PoolUser
  @model(queries: null, subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "userID", operations: [read, update, delete] }
      { allow: private, operations: [create] }
    ]
  )
  @key(name: "byPool", fields: ["poolID", "userID"])
  @key(name: "byUser", fields: ["userID", "poolID"]) {
  id: ID!
  poolID: ID!
  userID: ID!
  pool: Pool! @connection(fields: ["poolID"])
  user: User! @connection(fields: ["userID"])
}

type DataType
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [create, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  data: String!
}

enum CatagoryStatus {
  UNPUBLISHED
  PUBLISHED
}

type Catagory
  @key(name: "catagorysByStatus", fields: ["status", "title"])
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [create, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  catagory: String!

  xtypeID: ID!
  xtype: DataType @connection(fields: ["xtypeID"])

  ytypeID: ID!
  ytype: DataType @connection(fields: ["ytypeID"])

  status: CatagoryStatus!
}

enum PoolStatus {
  UNPUBLISHED
  ACTIVE
  COMPLETED
}

type Pool
  #@key(name: "poolsById", fields: ["id"], queryField: "poolsById") #For connection to tables
  @key(name: "poolssByOwner", fields: ["owner"], queryField: "poolssByOwner")
  @key(name: "byKey", fields: ["privateKey"], queryField: "byKey")
  @model(timestamps: { createdAt: "createdAt", updatedAt: "updatedAt" })
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: owner, ownerField: "owner", operations: [delete, update] }
      { allow: groups, groups: ["gatherer"], operations: [create] }
    ]
  ) {
  id: ID!
  title: String!
  description: String!
  tnc: String!
  image: S30Object
  requiredtrust: Float!
  status: PoolStatus!
  catagoryID: ID!
  catagory: Catagory @connection(fields: ["catagoryID"])
  samples: [sample] @connection(keyName: "byPoolID", fields: ["id"])
  users: [PoolUser] @connection(keyName: "byPool", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
  privateKey: String
    @auth(
      rules: [
        {
          allow: owner
          ownerField: "owner"
          operations: [read, update, create]
        }
      ]
    )
}

type S30Object {
  bucket: String!
  region: String!
  key: String!
}

type sample
  @key(name: "byPoolID", fields: ["poolID"], queryField: "byPoolID") #For connection to tables
  @key(
    name: "byLabeled"
    fields: ["poolID", "labeledStatus"]
    queryField: "byLabeled"
  ) #For user sample selection
  #@key(name: "byStatus", fields: ["labeledStatus", "modifiedAt"] queryField: "byStatus") #For the lambda cleaner cron job
  @model(
    timestamps: { createdAt: "createdAt" }
    mutations: null
    subscriptions: null
  )
  @auth(rules: [{ allow: private, operations: [read, update] }]) {
  poolID: ID!
  id: ID!
  x: [String]!
  y: [String]!
  modifiedBy: String
  modifiedAt: AWSDateTime
  labeledStatus: sampleStatus
  createdAt: AWSDateTime
}

enum sampleStatus {
  COMPLETED
  CHECKEDOUT
  UNCOMPLETED
}
